apiVersion: v1
kind: Namespace
metadata:
  name: nginx-ingress

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: nginx-ingress

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: nginx-ingress
data:
  enable-vts-status: "false"
  server-name-hash-bucket-size: "256"
  use-proxy-protocol: "false"
  worker-processes: "2"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: nginx-ingress
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app: nginx-ingress
      component: "controller"
      release: addons
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "controller"
        release: addons
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nginx-ingress
                - key: component
                  operator: In
                  values:
                  - controller
                - key: release
                  operator: In
                  values:
                  - addons
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.23.0
          imagePullPolicy: "IfNotPresent"
          args:
          - /nginx-ingress-controller
          - --default-backend-service=nginx-ingress/nginx-ingress-k8s-backend
          - --enable-ssl-passthrough=true
          - --publish-service=nginx-ingress/nginx-ingress
          - --election-id=ingress-controller-leader
          - --ingress-class=nginx
          - --update-status=true
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --configmap=nginx-ingress/nginx-ingress
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 100Mi
      hostNetwork: false
      serviceAccountName: nginx-ingress
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: nginx-ingress
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  selector:
    app: nginx-ingress
    component: "controller"
    release: addons
  type: "LoadBalancer"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - namespaces
      - pods
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace:  nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace:  nginx-ingress

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.8.0
    heritage: Tiller
    release: addons
  name: nginx-ingress
  namespace:  nginx-ingress


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress

  name: nginx-ingress-k8s-backend
  namespace: nginx-ingress
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app: nginx-ingress
      component: "nginx-ingress-k8s-backend"
      release: addons
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "nginx-ingress-k8s-backend"
        release: addons
    spec:
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: nginx-ingress-k8s-backend
          image: eu.gcr.io/gardener-project/gardener/ingress-default-backend:0.7.0
          imagePullPolicy: "IfNotPresent"
          args:
          livenessProbe:
            httpGet:
              path: /healthy
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            {}
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-0.8.0
    component: "nginx-ingress-k8s-backend"
    heritage: Tiller
    release: addons
  name: nginx-ingress-k8s-backend
  namespace: nginx-ingress
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: nginx-ingress
    component: "nginx-ingress-k8s-backend"
    release: addons
  type: "ClusterIP"